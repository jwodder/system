---
- set_fact:
    # This makes the variable accessible to subsequent roles, right?
    admin_user: "{{admin_user}}"

# Creating a new group with sudo powers is a workaround that allows the admin
# user to use `sudo` without their home directory being defiled by the
# `.sudo_as_admin_successful` file.
- name: Create sudmin group
  group: name=sudmin state=present

- name: Grant sudmin group sudo powers
  lineinfile:
    dest: /etc/sudoers
    line: '%sudmin ALL=(ALL:ALL) ALL'
    validate: 'visudo -cf %s'

- name: Create admin user
  user:
    name: "{{admin_user}}"
    groups: adm,staff,sudmin,users
    # `adm` membership lets me read files in `/var/log` without the need for
    # `sudo`.
    append: true
    shell: /bin/bash
    home: "/home/{{admin_user}}"
    move_home: true
    comment: "{{admin_gecos}}"
    generate_ssh_key: true
    ssh_key_type: rsa
    ssh_key_comment: "{{admin_user}}@{{ansible_hostname}}"

- name: Fetch root's authorized_keys
  command: cat /root/.ssh/authorized_keys
  register: authkeys

- name: Add root's authorized_keys to admin's
  authorized_key: user={{admin_user}} manage_dir=true key="{{authkeys.stdout}}"

- name: Set up Google Authenticator for admin
  shell: 'yes | google-authenticator'
  args:
    creates: "/home/{{admin_user}}/.google_authenticator"
  become_user: "{{admin_user}}"

- name: Give admin special sudo powers
  template:
    ### TODO: Files in /etc/sudoers.d are ignored if their names contain a
    ### period.  Look for a way to handle this that doesn't cause problems when
    ### both foo.bar and foo-bar are set up as admin users with this role.
    dest: "/etc/sudoers.d/{{admin_user|replace('.', '-')}}"
    src: sudoer
    validate: 'visudo -cf %s'
    mode: 0440
    owner: root
    group: root
    backup: true

- name: Set admin's crontab variables
  cronvar:
    user: "{{admin_user}}"
    name: "{{item.key}}"
    value: "{{item.value}}"
  with_dict:
    CONTENT_TYPE: 'text/plain; charset="utf-8"'
    CRONNING: 'true'
    LANG: en_US.UTF-8
    LC_ALL: en_US.UTF-8
    PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/jwodder/bin'

- name: Create cronjob for cleaning admin's ~
  cron:
    user: "{{admin_user}}"
    name: purge
    minute: 0
    hour: 9
    job: 'cd ~; xargs -a /opt/jwodder/etc/cruft -r rm -rf'
